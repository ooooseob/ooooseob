// --------------------------------------------------------------------------
// 📌 스코프 & 호이스트
// --------------------------------------------------------------------------

// -----------------------------------------------------
//
// 스코프(Scope)
// - 코드 영역(범위)
// - 전역(전체 영역: global scope)
// - 지역(일부 영역: local scope)
//
// 호이스트(Hoist)
// - 무엇을 끌어올리나?
// - [ 함수 선언 ]을 [ 코드 작성 영역의 가장 상단 ]으로 끌어올린다.
// - [ var 변수 선언 ]을 [ 코드 작성 영역의 가장 상단 ]으로 끌어올린다.
//
// -----------------------------------------------------

// 호이스트(Function Hoist)
// - 사람들이 현상(벌어진 일)만 보고 그 느낌을 표현한 말에 불과
//
// - 컴퓨터 (JavaScript 엔진 관점) :
//   코드 스캔 후, 함수 선언을 먼저 메모리에 등록한다.
//   그리고 코드를 처리한다.
//
// - 인간 (개발자 관점) :
//   "작성된 순서대로 코드가 실행될 것이다."

// 선언된 함수는 코드를 작성하는 영역의
// 가장 상위로 끌어올려진 것처럼 작동된다.
// 함수()

// 함수 선언(Function Declaration)
// 컴퓨터 메모리에 함수가 기억된다.
function 함수() {
  console.log('함수가 실행되었어요!')
}

// 함수 실행
// 컴퓨터 메모리에 기억된 함수 이름을 통해 코드를 실행한다.

/* -------------------------------------------------------------------------- */
/* Var 변수 선언 호이스트 현상                                                      */
/* -------------------------------------------------------------------------- */
// var 변수 선언
// console.log(1, 마이네임) // ERROR? or Log?

// var 마이네임 = '야무'

// console.log(2, 마이네임)

// 변수 선언 호이스트
// 마치 호이스트(끌어올려진 것)처럼 보여요.
// 예측된 결과

// var 변수 선언은 마치 끌어올려진 것처럼 보이는데
// 선언부만 끌어올려진 것처럼 작동한다.
// var 마이네임 // undefined

// console.log(마이네임) // ERROR? or Log?

// 마이네임 = '야무'

/* -------------------------------------------------------------------------- */
/* Let 변수, Const 상수 선언 호이스트 현상이 일어날까? - 아니오!                                     */
/* -------------------------------------------------------------------------- */

// console.log(1, 마이네임) // ERROR? or Log?

// let 변수 선언
// let 마이네임 = '야무'

// const 상수 선언
const 마이네임 = '야무'

// console.log(2, 마이네임)

// 호이스트 현상을 잘 이용하면 코드의 실행 흐름을 깔끔하게 유추할 수 있다.

// 집으로가요()
// 점심먹어요()
// 그리고공부해요()
// 달려요()

function 달려요() {
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
}

function 집으로가요() {
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
}

function 점심먹어요() {
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
}

function 그리고공부해요() {
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
  //...
}

// --------------------------------------------------------------------------
// 함수를 만드는 2가지 방법
// --------------------------------------------------------------------------
// 1. 함수 선언 (Function Declaration)
// 2. 함수 표현식 (Function Expression)
// --------------------------------------------------------------------------

// 변수 선언

// 함수 선언
function look(who) {
  console.log(who + '를(을) 보다')
}
// 함수 선언, 함수 표현식 그리고 호이스트 현상 비교

// 보다('공무원님')
// look('선생님')

// var 보다 // [ undefined ]
// console.log(보다) // undefined

// 보다('형사님') // undefined() ❌

// 함수 (표현)식
// 자바스크립트는 함수를 값(value)으로 취급
// let 변수 = 값 (할당)
// let 보다 = 'see' // string
// let 보다 = 1001 // number
// let 보다 = true // boolean
// let 변수 = 함수
let 보다 = function (누구) {
  console.log(누구 + '를(을) 보다')
}

// 함수 작성법은 2개 비교
// 1. 함수 선언 (function 키워드로 시작, 호이스트 현상 ✅)
// 2. 함수 표현식 (변수에 함수 값을 할당, JS는 함수를 값으로 취급 / 호이스트 현상 ❌)

// let myFunction = function () {
//   console.log('this is a mine function name')
// }

// myFunction()

function logger(logMessage) {
  console.log('로그 메시지: ', logMessage)
}

// logger('실습을 통한 연습은 언제나 옳습니다. ☺️')

/* -------------------------------------------------------------------------- */
/* PxToRem 함수                                                                 */
/* -------------------------------------------------------------------------- */

// 16px / 16px = 1rem
// 32px / 16px = 2rem
// 189px / 16px = ?rem

function pxToRem(px) {
  // let rem = px / 16 + 'rem'
  // return rem
  return px / 16 + 'rem'
}

function remToPx(rem) {
  // let px = rem * 16 + 'px'
  // return px
  return rem * 16 + 'px'
}

// 주문한 피자 가격 계산 함수
function 피자가격계산(피자가격, 피자갯수) {
  return 피자가격 * 피자갯수
}

// console.log(피자가격계산(10_000, 5))
// console.log(피자가격계산(22_000, 2))

// 주차요금 계산 함수
const HOUR_PARKING_FEE = 1000

let 주차요금계산 = function (주차시간) {
  return 주차시간 * HOUR_PARKING_FEE + '원'
}

// console.log(주차요금계산(1.5))
// console.log(주차요금계산(5))

// 짝수, 홀수 확인 함수
let 짝수인지확인 = function (수) {
  // 수 % 2 -> (0 또는 1)
  // 수 % 2 == 0 -> (true 또는 false)
  // 비교 연산자 (x == y 비교한다)
  return 수 % 2 == 0
}

// 생일 축하 메시지 출력 함수
// "[     ]야! 너의 생일을 진심으로 축하해! 🎂🎉"

function 생일축하메시지출력(누구야) {
  return 누구야 + '야! 너의 생일을 진심으로 축하해! 🎂🎉'
}

// 올해 남은 날짜 계산 함수

const NUMBER_OF_DAYS_OF_YEAR = 365

function 올해남은날짜계산(현재날짜의일수) {
  return NUMBER_OF_DAYS_OF_YEAR - 현재날짜의일수
}

// 세금 포함 가격 계산 함수

const 세금_비율 = 0.0333 // 3.3333%

function 세금포함가격계산(가격) {
  // return 가격 + 가격의세금비율만큼해당하는금액
  return 가격 + 가격 * 세금_비율
}

const TAX_RATIO = 0.0333 // 3.3333%

function priceWithTax(price) {
  return price + price * TAX_RATIO
}

// 나이가 성인인지 판별하는 함수
// 나이가 성인이면 true 반환 , 나이가 미성년이면 false 반환
// 비교 연산자
// x == y (같다)
// x > y | x >= y (크다 | 크거나 같다)

const 성인_나이_기준 = 19

function 성인나이인가요(나이) {
  let 성인나이인지아닌지여부 = 나이 >= 성인_나이_기준 // true or false
  return 성인나이인지아닌지여부
}
